# Deploy Multi-Admin Whitelist Contract
# This script deploys the whitelist contract with dual admin capabilities

Write-Host "üöÄ Deploying Multi-Admin Whitelist Contract..." -ForegroundColor Green
Write-Host "üìã Contract will have two admin capabilities:" -ForegroundColor Cyan
Write-Host "   - Deployer address (your current address)" -ForegroundColor Yellow
Write-Host "   - Configured address: 0x0129fc626e3656cfa624cb324826dd5e60782d6f309d11a4450ebde0d974e0a5" -ForegroundColor Yellow
Write-Host ""

# Navigate to contract directory
Set-Location contracts

# Build the contract
Write-Host "üî® Building contract..." -ForegroundColor Blue
$buildResult = sui move build

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Build failed!" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Build successful!" -ForegroundColor Green
Write-Host ""

# Deploy the contract
Write-Host "üöÄ Deploying contract..." -ForegroundColor Blue
$deployOutput = sui client publish --gas-budget 100000000 --json | ConvertFrom-Json

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Deployment failed!" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Deployment successful!" -ForegroundColor Green
Write-Host ""

# Parse deployment output
$packageId = ($deployOutput.objectChanges | Where-Object { $_.type -eq "published" }).packageId
$whitelistObjectId = ($deployOutput.objectChanges | Where-Object { $_.objectType -like "*Whitelist*" }).objectId
$adminCapIds = ($deployOutput.objectChanges | Where-Object { $_.objectType -like "*AdminCap*" }).objectId

Write-Host "üìã Deployment Results:" -ForegroundColor Cyan
Write-Host "   Package ID: $packageId" -ForegroundColor Yellow
Write-Host "   Whitelist Object ID: $whitelistObjectId" -ForegroundColor Yellow
Write-Host "   Admin Capability IDs: $($adminCapIds -join ', ')" -ForegroundColor Yellow
Write-Host ""

# Create a config file for the frontend
$configFile = "../lib/contractConfig.ts"
Write-Host "üìù Creating frontend configuration..." -ForegroundColor Blue

$configContent = @"
// Multi-Admin Whitelist Contract Configuration
// Auto-generated by deployment script

export const WHITELIST_CONTRACT_CONFIG = {
  packageId: '$packageId',
  whitelistObjectId: '$whitelistObjectId',
  // Note: Admin Cap IDs are owned by respective admin addresses
  network: 'testnet',
  adminAddresses: [
    // Deployer address (will be your address)
    // Configured admin address
    '0x0129fc626e3656cfa624cb324826dd5e60782d6f309d11a4450ebde0d974e0a5'
  ]
};

// For backward compatibility
export const CONTRACT_CONFIG = WHITELIST_CONTRACT_CONFIG;
"@

$configContent | Out-File -FilePath $configFile -Encoding UTF8

Write-Host "‚úÖ Configuration saved to: $configFile" -ForegroundColor Green
Write-Host ""

Write-Host "üéâ Deployment Complete!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Next Steps:" -ForegroundColor Cyan
Write-Host "   1. Update your frontend to use the new contract configuration" -ForegroundColor Yellow
Write-Host "   2. Both admin addresses can now manage the whitelist" -ForegroundColor Yellow
Write-Host "   3. The configured address (0x0129fc626e3656cfa624cb324826dd5e60782d6f309d11a4450ebde0d974e0a5) has admin access" -ForegroundColor Yellow
Write-Host ""
Write-Host "üí° To test the contract:" -ForegroundColor Cyan
Write-Host "   sui client call --package $packageId --module simple_whitelist --function add_address --args $whitelistObjectId <ADMIN_CAP_ID> <ADDRESS_TO_WHITELIST>" -ForegroundColor Yellow